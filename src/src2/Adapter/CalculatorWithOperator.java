package Adapter;

/*
 * 2. Создать класс CalculatorWithOperator.
 *	2.1 Все методы объявленные в данном классе НЕ статические (не имеют модификатор static).
 *	2.2 В классе должны присутствовать математические методы:
 *		2.2.1 4 базовых математических метода (деление, умножение, вычитание, сложение) каждый из этих методов должен принимать два
 *		параметра (определитесь с их типами) и должны возвращать результат (определиться с возвращаемым типом результата) при помощи ключевого слово return.
 *		2.2.2 3 метода (Возведение в целую степень дробного положительного числа, Модуль числа, Квадратный корень из числа).
 *	2.3 В методах можно использовать любые арифметические операторы.
 *	2.4 Использование библиотеки Math ЗАПРЕЩЕНО! (кроме извлечения корня). Если у Вас плохо с математикой, то для реализации метода "Квадратный корень из числа"
 *	    можно воспользоваться библиотекой Math.
 *	2.5 Создать класс CalculatorWithOperatorMain в котором будет точка входа (main метод). В main методе требуется создать экземпляр калькулятора и используя методы из данного экземпляра
 *	 посчитать выражения из задания 1. Вывести в консоль результат.
 */

public class CalculatorWithOperator implements ICalculator {

    /**
     * Метод получения результата деления одного числа на второе
     * @param x делимое
     * @param y делитель
     * @return результат деления (частное)
     */
    public double getDivision(double x, double y) {
        return x / y;
    }

    /**
     * Метод получения результата умножения одного числа на второе
     * @param x множитель
     * @param y множитель
     * @return результат перемножения параметров (произведение)
     */
    public double getMultiplicatin(double x, double y) {
        return x * y;
    }

    /**
     * Метод получения результата вычитания одного числа на второе
     * @param x уменьшаемое
     * @param y уменьшитель
     * @return результат вычитания (разность)
     */
    public double getSubtruction(double x, double y) {
        return x - y;
    }

    /**
     * Метод получения суммы двух чисел
     * @param x слагаемое
     * @param y слагаемое
     * @return сумма двух слагаемых
     */
    public double getAddition(double x, double y) {
        return x + y;
    }

    /**
     * Метод возведение в целую степень дробного положительного числа
     * @param x дробного положительного число, возводимое в степень
     * @param y степень (целое число)
     * @return результат возведения в степень,  return -1 - если введено не положительное число
     */
    public double getPowerOfNumber(double x, int y) {
        if(x <= 0) {
            return -1;
        }
        if(y == 0){
            return 1;
        }

        double result = 1;
        for (int i = 1; i <= y; i++) {
            result *= x;
        }
        return result;
    }

    /**
     * Метод нахождения модуля числа
     * @param x число, от которого исчем модуль
     * @return модуля числа
     */
    public double getModuleOfNumber(double x) {
        if(x < 0) {
            return x * -1;
        } else {
            return x;
        }
    }

    /**
     * Метод нахождения квадратного корня, используя алгоритм Ньютона
     * @param x число, от которого исчем квадратный корень
     * @return результат вычисления квадратного корня, return = -1 - если передан отрицательный параметр x
     */
     public double getSquareRoot(double x) {
        if (x < 0) {
            return -1;
        }
        double a = x;
        while (true) {
            double temp = (x / a + a) / 2;
            if(getModuleOfNumber(a - temp) < 1e-15) {
                return a;
            } else {
                a = temp;
            }
        }
     }
}
